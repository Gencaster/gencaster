fragment FullStreamInfo on StreamInfo {
  __typename
  stream {
    numListeners
    createdDate
    modifiedDate
    streamPoint {
      uuid
      port
      useInput
      modifiedDate
      lastLive
      host
      createdDate
      janusInPort
      janusInRoom
      janusOutPort
      janusOutRoom
    }
    uuid
  }
}

fragment UserInfo on User {
  __typename
  email
  firstName
  isActive
  isStaff
  lastName
  username
}

fragment AudioFileInfo on AudioFile {
    autoGenerated
    createdDate
    description
    name
    uuid
    file {
      name
      path
      size
      url
    }
}

query GetGraphs($name:String) {
  graphs(filters: {name: {iContains: $name}}) {
    uuid
    name
    slugName
    templateName
  }
}

query GetGraphsMeta($slug: String!) {
  graphs(filters: {slugName: {exact: $slug}}) {
    aboutText
    displayName
    endText
    name
    startText
    templateName
    uuid
    slugName
  }
}

mutation createEdge($nodeDoorInUuid:UUID!, $nodeDoorOutUuid:UUID!) {
  addEdge(newEdge: {nodeDoorInUuid: $nodeDoorInUuid, nodeDoorOutUuid: $nodeDoorOutUuid}) {
    uuid
  }
}

mutation createNode($name: String!, $graphUuid: UUID!, $color: String, $positionX: Float, $positionY: Float) {
  addNode(
    newNode: {name: $name, graphUuid: $graphUuid, color: $color, positionX: $positionX, positionY: $positionY}
  )
}

mutation updateNode($nodeUuid: UUID!, $name: String, $color: String, $positionX: Float, $positionY: Float) {
  updateNode(
    nodeUpdate: {uuid: $nodeUuid, name: $name, color: $color, positionX: $positionX, positionY: $positionY}
  )
}

mutation deleteNode($nodeUuid: UUID!) {
  deleteNode(nodeUuid: $nodeUuid)
}

mutation deleteEdge($edgeUuid: UUID!) {
  deleteEdge(edgeUuid: $edgeUuid)
}

mutation CreateScriptCells($nodeUuid: UUID!, $scriptCellInputs: [ScriptCellInputCreate!]!) {
  createScriptCells(
    nodeUuid: $nodeUuid,
    scriptCellInputs: $scriptCellInputs
  ) {
    uuid
  }
}

mutation UpdateScriptCells($scriptCellInputs: [ScriptCellInputUpdate!]!) {
  updateScriptCells(
    scriptCellInputs: $scriptCellInputs
  ) {
    uuid
  }
}

mutation deleteScriptCell($scriptCellUuid:UUID!) {
  deleteScriptCell(scriptCellUuid: $scriptCellUuid)
}

fragment NodeDoorBasic on NodeDoor {
  uuid
  name
  order
  isDefault
  node {
    uuid
  }
}

subscription graph($uuid: UUID!) {
  graph(graphUuid: $uuid) {
    name
    slugName
    uuid
    edges {
      uuid
      inNodeDoor {
        ...NodeDoorBasic
      }
      outNodeDoor {
        ...NodeDoorBasic
      }
    }
    nodes {
      name
      uuid
      scriptCells {
        cellCode
        cellOrder
        cellType
        uuid
      }
      positionX
      positionY
      color
      isEntryNode
      inNodeDoors {
        ...NodeDoorBasic
      }
      outNodeDoors {
        ...NodeDoorBasic
      }
    }
  }
}

fragment NodeDoorDetail on NodeDoor {
  uuid
  name
  order
  isDefault
  code
  doorType
}

subscription node($uuid: UUID!) {
  node(nodeUuid: $uuid) {
    inNodeDoors {
      ...NodeDoorDetail
    }
    outNodeDoors {
      ...NodeDoorDetail
    }
    color
    name
    positionX
    positionY
    isEntryNode
    scriptCells {
      cellCode
      cellOrder
      cellType
      uuid
      audioCell {
        playback
        uuid
        volume
        audioFile {
          uuid
          name
          autoGenerated
          description
          file {
            url
            name
          }
        }
      }
    }
    uuid
  }
}

fragment GraphMetaData on Graph {
  uuid
  templateName
  startText
  slugName
  name
  endText
  displayName
  aboutText
  streamAssignmentPolicy
  publicVisible
}

query GetGraph($graphUuid:ID!) {
	graph(pk: $graphUuid) {
    ...GraphMetaData
  }
}

mutation CreateGraph($graphInput: AddGraphInput!) {
  addGraph(graphInput: $graphInput) {
    name
    uuid
    nodes {
      name
      uuid
      isEntryNode
    }
  }
}

mutation UpdateGraph($graphUuid:UUID!, $graphUpdate: UpdateGraphInput!) {
  updateGraph(
    graphInput: $graphUpdate
    graphUuid: $graphUuid
  ) {
    uuid
  }
}

subscription stream($graphUuid: UUID!) {
  streamInfo(graphUuid: $graphUuid) {
    __typename
    ... on StreamInfo {
      __typename
      ...FullStreamInfo
      streamInstruction {
        createdDate
        instructionText
        modifiedDate
        state
        uuid
        returnValue
      }
    }
    ... on NoStreamAvailable {
      __typename
      error
    }
    ... on Dialog {
      __typename
      content {
        __typename
        ... on Text {
          __typename
          text
        }
        ... on Input {
          __typename
          label
          placeholder
          key
        }
        ... on Checkbox {
          __typename
          checked
          label
          key
          callbackActions
        }
      }
      buttons {
        __typename
        buttonType
        text
        key
        callbackActions
        value
      }
      title
    }
    ... on GraphDeadEnd {
      __typename
      error
    }
  }
}

query streamPoints {
  streamPoints {
    createdDate
    host
    janusInPort
    janusInRoom
    janusOutPort
    janusOutRoom
    lastLive
    modifiedDate
    port
    useInput
    uuid
  }
}

mutation UploadAudioFile($addAudioFile: AddAudioFile!) {
  addAudioFile(newAudioFile: $addAudioFile) {
    ... on AudioFile {
      __typename
      ...AudioFileInfo
    }
    ... on InvalidAudioFile {
      __typename
      error
    }
  }
}

mutation SendStreamVariable($streamVariables: [StreamVariableInput!]!) {
  createUpdateStreamVariable(streamVariables: $streamVariables) {
    uuid
    value
  }
}

query AudioFiles($autoGenerated: Boolean! = false, $audioNameFilter: String! = "", $limit: Int=50, $offset:Int = 0) {
  audioFiles(
    filters: {autoGenerated: $autoGenerated, name: {iContains: $audioNameFilter}}
    pagination: {limit: $limit, offset: $offset}
  ) {
    ...AudioFileInfo
  }
}

query IsAuthenticated {
  isAuthenticated {
    ...UserInfo
  }
}

mutation LoginUser($username: String!, $password: String!) {
  authLogin(password: $password, username: $username) {
    ... on LoginError {
      __typename,
      errorMessage
    }
    ... on User {
      ...UserInfo
    }
  }
}

mutation Logout {
  authLogout
}

mutation UpdateAudioFile($uuid: UUID!, $updateAudioFile: UpdateAudioFile!) {
  updateAudioFile(
    updateAudioFile: $updateAudioFile,
    uuid: $uuid
  ) {
		...AudioFileInfo
  }
}

fragment StreamInfoFragment on Stream {
    uuid
    numListeners
    modifiedDate
    createdDate
    streamPoint {
      createdDate
      host
      janusInPort
      janusInRoom
      janusOutPort
      janusOutRoom
      lastLive
      modifiedDate
      port
      useInput
      uuid
    }
}

subscription Streams($numOfStreams: Int) {
  streams(limit: $numOfStreams) {
		...StreamInfoFragment
  }
}

subscription StreamLogs($streamUuid: UUID, $streamPointUuid: UUID) {
  streamLogs(streamUuid: $streamUuid, streamPointUuid: $streamPointUuid) {
    createdDate
    level
    message
    name
    uuid
    stream {
      uuid
    }
    streamPoint {
      uuid
    }
  }
}

mutation createNodeDoor($nodeUuid: UUID!, $name: String!, $code: String! = "", $doorType: DoorType = OUTPUT, $order: Int) {
  createNodeDoor(
    nodeDoorInput: {name: $name, code: $code, doorType: $doorType, order: $order}
    nodeUuid: $nodeUuid
  ) {
    uuid
  }
}

mutation deleteNodeDoor($nodeDoorUuid: UUID!) {
  deleteNodeDoor(nodeDoorUuid: $nodeDoorUuid)
}

mutation updateNodeDoor($uuid: UUID!, $name: String, $code: String, $order: Int) {
  updateNodeDoor(
    nodeDoorInput: {name: $name, code: $code, order: $order, uuid: $uuid}
  ) {
    ... on NodeDoor {
      __typename
      uuid
    }
    ... on InvalidPythonCode {
      __typename
      errorCode
      errorMessage
      errorType
    }
  }
}
