query GetGraphs($name:String) {
  graphs(filters: {name: {iContains: $name}}) {
    uuid
    name
  }
}

mutation createEdge($nodeInUuid:UUID!, $nodeOutUuid:UUID!) {
  addEdge(newEdge: {nodeInUuid: $nodeInUuid, nodeOutUuid: $nodeOutUuid})
}

mutation createNode($name: String!, $graphUuid: UUID!, $color: String, $positionX: Float, $positionY: Float) {
  addNode(
    newNode: {name: $name, graphUuid: $graphUuid, color: $color, positionX: $positionX, positionY: $positionY}
  )
}

mutation updateNode($nodeUuid: UUID!, $name: String, $color: String, $positionX: Float, $positionY: Float) {
  updateNode(
    nodeUpdate: {uuid: $nodeUuid, name: $name, color: $color, positionX: $positionX, positionY: $positionY}
  )
}

mutation deleteNode($nodeUuid: UUID!) {
  deleteNode(nodeUuid: $nodeUuid)
}

mutation deleteEdge($edgeUuid: UUID!) {
  deleteEdge(edgeUuid: $edgeUuid)
}

mutation CreateUpdateScriptCells($nodeUuid: UUID!, $scriptCellInputs: [ScriptCellInput!]!) {
  createUpdateScriptCells(
    nodeUuid: $nodeUuid,
    scriptCellInputs: $scriptCellInputs
  ) {
    uuid
  }
}

mutation deleteScriptCell($scriptCellUuid:UUID!) {
  deleteScriptCell(scriptCellUuid: $scriptCellUuid)
}

subscription graph($uuid: UUID!) {
  graph(graphUuid: $uuid) {
    name
    uuid
    edges {
      uuid
      outNode {
        uuid
      }
      inNode {
        uuid
      }
    }
    nodes {
      name
      uuid
      scriptCells {
        cellCode
        cellOrder
        cellType
        uuid
      }
      positionX
      positionY
      color
    }
  }
}

subscription node($uuid: UUID!) {
  node(nodeUuid: $uuid) {
    color
    name
    positionX
    positionY
    scriptCells {
      cellCode
      cellOrder
      cellType
      uuid
      audioCell {
        playback
        uuid
        volume
        audioFile {
          uuid
          name
          autoGenerated
          description
          file {
            url
            name
          }
        }
      }
    }
    uuid
  }
}

mutation CreateGraph($graphInput: AddGraphInput!) {
  addGraph(graphInput: $graphInput) {
    name
    uuid
    nodes {
      name
      uuid
      isEntryNode
    }
  }
}

subscription stream($graphUuid: UUID!) {
  streamInfo(graphUuid: $graphUuid) {
    ... on StreamInfo {
      __typename
      stream {
        numListeners
        createdDate
        modifiedDate
        streamPoint {
          uuid
          port
          useInput
          modifiedDate
          lastLive
          host
          createdDate
          janusInPort
          janusInRoom
          janusOutPort
          janusOutRoom
        }
        uuid
      }
      streamInstruction {
        createdDate
        instructionText
        modifiedDate
        state
        uuid
        returnValue
      }
    }
    ... on NoStreamAvailable {
      __typename
      error
    }
  }
}

query streamPoints {
  streamPoints {
    createdDate
    host
    janusInPort
    janusInRoom
    janusOutPort
    janusOutRoom
    lastLive
    modifiedDate
    port
    useInput
    uuid
  }
}

mutation UploadAudioFile($addAudioFile: AddAudioFile!) {
  addAudioFile(newAudioFile: $addAudioFile) {
    ... on AudioFile {
      __typename
      uuid
      description
      file {
        url
        name
      }
    }
    ... on InvalidAudioFile {
      __typename
      error
    }
  }
}

mutation SendStreamVariable($streamVariables: [StreamVariableInput!]!) {
  createUpdateStreamVariable(streamVariables: $streamVariables) {
    uuid
    value
  }
}

query AudioFiles($autoGenerated: Boolean! = false, $audioNameFilter: String! = "", $limit: Int=50, $offset:Int = 0) {
  audioFiles(
    filters: {autoGenerated: $autoGenerated, name: {iContains: $audioNameFilter}}
    pagination: {limit: $limit, offset: $offset}
  ) {
    autoGenerated
    description
    name
    uuid
    file {
      url
      name
      size
    }
    createdDate
  }
}

query IsAuthenticated {
  isAuthenticated {
    email
    username
  }
}
