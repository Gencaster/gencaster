"""Date with time (isoformat)"""
scalar DateTime

type Edge {
  uuid: UUID!
  inNode: Node!
  outNode: Node!
}

input EdgeInput {
  nodeInUuid: UUID!
  nodeOutUuid: UUID!
}

type Graph {
  uuid: UUID!
  name: String!
  nodes: [Node!]!
  edges: [Edge!]!
}

input IntFilterLookup {
  exact: Int
  iExact: Int
  contains: Int
  iContains: Int
  inList: [Int!]
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  startsWith: Int
  iStartsWith: Int
  endsWith: Int
  iEndsWith: Int
  range: [Int!]
  isNull: Boolean
  regex: String
  iRegex: String
}

type Mutation {
  addNode(newNode: NodeInput!): Void
  updateNode(nodeUpdate: NodeUpdate!): Void
  addEdge(newEdge: EdgeInput!): Void
  deleteEdge(edgeUuid: UUID!): Void
  deleteNode(nodeUuid: UUID!): Void
}

type Node {
  uuid: UUID!
  name: String!
  color: String!
  positionX: Float!
  positionY: Float!
  inEdges: [Edge!]!
  outEdges: [Edge!]!
  scriptCells: [ScriptCell!]!
}

input NodeInput {
  name: String!
  graphUuid: UUID!
  positionX: Float = null
  positionY: Float = null
  color: String = null
}

input NodeUpdate {
  uuid: UUID!
  name: String = null
  positionX: Float = null
  positionY: Float = null
  color: String = null
}

type Query {
  streamPoint(pk: ID): StreamPoint!
  streamPoints(filters: StreamPointFilter): [StreamPoint!]!
  graphs: [Graph!]!
  graph(pk: ID): Graph!
  nodes: [Node!]!
  node(pk: ID): Node!
}

type ScriptCell {
  uuid: UUID!
  node: Node!
  cellType: String!
  cellCode: String!
  cellOrder: Int!
}

type StreamPoint {
  uuid: UUID!
  createdDate: DateTime!
  modifiedDate: DateTime!
  host: String!
  port: Int!
  useInput: Boolean!
  janusInPort: Int
  janusOutPort: Int
  lastLive: DateTime
}

input StreamPointFilter {
  uuid: UUIDFilterLookup
  janusInPort: IntFilterLookup
}

scalar UUID

input UUIDFilterLookup {
  exact: UUID
  iExact: UUID
  contains: UUID
  iContains: UUID
  inList: [UUID!]
  gt: UUID
  gte: UUID
  lt: UUID
  lte: UUID
  startsWith: UUID
  iStartsWith: UUID
  endsWith: UUID
  iEndsWith: UUID
  range: [UUID!]
  isNull: Boolean
  regex: String
  iRegex: String
}

"""Represents NULL values"""
scalar Void
